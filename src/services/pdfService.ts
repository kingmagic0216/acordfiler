// PDF generation service for ACORD forms
import { FormSubmission } from './formService';

export interface PDFGenerationOptions {
  filename?: string;
  includeWatermark?: boolean;
  watermarkText?: string;
}

class PDFService {
  // Generate PDF for ACORD form
  async generateACORDPDF(
    submission: FormSubmission,
    formType: string,
    options: PDFGenerationOptions = {}
  ): Promise<Blob> {
    const {
      filename = `${formType.replace(' ', '_')}_${submission.id}.pdf`,
      includeWatermark = true,
      watermarkText = 'DRAFT - Generated by ACORD Intake Platform'
    } = options;

    // Create a simple HTML representation of the ACORD form
    const htmlContent = this.generateACORDHTML(submission, formType, watermarkText, options);
    
    // For now, we'll create a simple text-based PDF representation
    // In a real implementation, you'd use a library like jsPDF or Puppeteer
    const pdfContent = this.createPDFContent(submission, formType, watermarkText);
    
    // Create a blob with the PDF content
    const blob = new Blob([pdfContent], { type: 'application/pdf' });
    
    return blob;
  }

  // Generate HTML representation of ACORD form
  private generateACORDHTML(
    submission: FormSubmission,
    formType: string,
    watermarkText: string,
    options: PDFGenerationOptions
  ): string {
    const { businessInfo, contactInfo, coverageInfo } = submission;
    
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${formType} - ${submission.id}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; border-bottom: 2px solid #000; padding-bottom: 10px; margin-bottom: 20px; }
          .form-title { font-size: 18px; font-weight: bold; }
          .section { margin: 20px 0; }
          .section-title { font-weight: bold; background-color: #f0f0f0; padding: 5px; }
          .field { margin: 5px 0; }
          .label { font-weight: bold; display: inline-block; width: 150px; }
          .value { display: inline-block; }
          .watermark { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%) rotate(-45deg); 
                      font-size: 48px; color: rgba(0,0,0,0.1); z-index: -1; }
        </style>
      </head>
      <body>
        ${options.includeWatermark ? `<div class="watermark">${watermarkText}</div>` : ''}
        
        <div class="header">
          <div class="form-title">${formType}</div>
          <div>Submission ID: ${submission.id}</div>
          <div>Generated: ${new Date().toLocaleDateString()}</div>
        </div>

        <div class="section">
          <div class="section-title">Business Information</div>
          <div class="field">
            <span class="label">Business Name:</span>
            <span class="value">${businessInfo.name}</span>
          </div>
          <div class="field">
            <span class="label">Federal ID/EIN:</span>
            <span class="value">${businessInfo.federalId}</span>
          </div>
          <div class="field">
            <span class="label">Business Type:</span>
            <span class="value">${businessInfo.businessType}</span>
          </div>
          <div class="field">
            <span class="label">Years in Business:</span>
            <span class="value">${businessInfo.yearsInBusiness}</span>
          </div>
          <div class="field">
            <span class="label">Description:</span>
            <span class="value">${businessInfo.description}</span>
          </div>
          ${businessInfo.website ? `
          <div class="field">
            <span class="label">Website:</span>
            <span class="value">${businessInfo.website}</span>
          </div>
          ` : ''}
        </div>

        <div class="section">
          <div class="section-title">Contact Information</div>
          <div class="field">
            <span class="label">Contact Name:</span>
            <span class="value">${contactInfo.contactName}</span>
          </div>
          <div class="field">
            <span class="label">Email:</span>
            <span class="value">${contactInfo.email}</span>
          </div>
          <div class="field">
            <span class="label">Phone:</span>
            <span class="value">${contactInfo.phone}</span>
          </div>
          <div class="field">
            <span class="label">Address:</span>
            <span class="value">${contactInfo.address}, ${contactInfo.city}, ${contactInfo.state} ${contactInfo.zipCode}</span>
          </div>
        </div>

        <div class="section">
          <div class="section-title">Coverage Information</div>
          <div class="field">
            <span class="label">Coverage Types:</span>
            <span class="value">${coverageInfo.coverageTypes.join(', ')}</span>
          </div>
        </div>

        <div class="section">
          <div class="section-title">Submission Details</div>
          <div class="field">
            <span class="label">Status:</span>
            <span class="value">${submission.status}</span>
          </div>
          <div class="field">
            <span class="label">Priority:</span>
            <span class="value">${submission.priority}</span>
          </div>
          <div class="field">
            <span class="label">Submitted:</span>
            <span class="value">${submission.submittedAt.toLocaleDateString()}</span>
          </div>
        </div>
      </body>
      </html>
    `;
  }

  // Create PDF content (simplified version)
  private createPDFContent(
    submission: FormSubmission,
    formType: string,
    watermarkText: string
  ): string {
    const { businessInfo, contactInfo, coverageInfo } = submission;
    
    return `
%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
  /Font <<
    /F1 5 0 R
  >>
>>
>>
endobj

4 0 obj
<<
/Length 1000
>>
stream
BT
/F1 12 Tf
50 750 Td
(${formType} - ${submission.id}) Tj
0 -20 Td
(Business Name: ${businessInfo.name}) Tj
0 -15 Td
(Federal ID: ${businessInfo.federalId}) Tj
0 -15 Td
(Business Type: ${businessInfo.businessType}) Tj
0 -15 Td
(Years in Business: ${businessInfo.yearsInBusiness}) Tj
0 -15 Td
(Contact: ${contactInfo.contactName}) Tj
0 -15 Td
(Email: ${contactInfo.email}) Tj
0 -15 Td
(Phone: ${contactInfo.phone}) Tj
0 -15 Td
(Address: ${contactInfo.address}, ${contactInfo.city}, ${contactInfo.state} ${contactInfo.zipCode}) Tj
0 -15 Td
(Coverage Types: ${coverageInfo.coverageTypes.join(', ')}) Tj
0 -15 Td
(Status: ${submission.status}) Tj
0 -15 Td
(Priority: ${submission.priority}) Tj
0 -15 Td
(Submitted: ${submission.submittedAt.toLocaleDateString()}) Tj
ET
endstream
endobj

5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000001300 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
1380
%%EOF
    `;
  }

  // Download PDF file
  async downloadPDF(blob: Blob, filename: string): Promise<void> {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  // Generate COI (Certificate of Insurance)
  async generateCOI(
    submission: FormSubmission,
    options: PDFGenerationOptions = {}
  ): Promise<Blob> {
    const {
      filename = `COI_${submission.id}.pdf`,
      includeWatermark = true,
      watermarkText = 'CERTIFICATE OF INSURANCE'
    } = options;

    const coiContent = this.createCOIContent(submission, watermarkText);
    const blob = new Blob([coiContent], { type: 'application/pdf' });
    
    return blob;
  }

  // Create COI content
  private createCOIContent(submission: FormSubmission, watermarkText: string): string {
    const { businessInfo, contactInfo, coverageInfo } = submission;
    
    return `
%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
  /Font <<
    /F1 5 0 R
    /F2 6 0 R
  >>
>>
>>
endobj

4 0 obj
<<
/Length 1500
>>
stream
BT
/F2 16 Tf
50 750 Td
(CERTIFICATE OF INSURANCE) Tj
0 -30 Td
/F1 12 Tf
(Insured: ${businessInfo.name}) Tj
0 -20 Td
(Federal ID: ${businessInfo.federalId}) Tj
0 -20 Td
(Address: ${contactInfo.address}, ${contactInfo.city}, ${contactInfo.state} ${contactInfo.zipCode}) Tj
0 -20 Td
(Contact: ${contactInfo.contactName}) Tj
0 -20 Td
(Email: ${contactInfo.email}) Tj
0 -20 Td
(Phone: ${contactInfo.phone}) Tj
0 -30 Td
(Coverage Types Requested:) Tj
0 -15 Td
${coverageInfo.coverageTypes.map(type => `(${type}) Tj 0 -15 Td`).join('')}
0 -30 Td
(Certificate ID: ${submission.id}) Tj
0 -20 Td
(Issued: ${new Date().toLocaleDateString()}) Tj
0 -20 Td
(Status: ${submission.status.toUpperCase()}) Tj
ET
endstream
endobj

5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

6 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica-Bold
>>
endobj

xref
0 7
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000001800 00000 n 
0000001900 00000 n 
trailer
<<
/Size 7
/Root 1 0 R
>>
startxref
1980
%%EOF
    `;
  }
}

export const pdfService = new PDFService();
